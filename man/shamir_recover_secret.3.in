.TH SHAMIR_RECOVER_SECRET 3 "2014-10-22" "libshamir"
.SH NAME
shamir_recover_secret, shamir_recover_poly \- recover the secret or polynomial from provided keys
.SH SYNOPSIS
.nf
.BR "#include <shamir.h>"
.sp
.BI "int shamir_recover_secret(shamir_params_t " params ", shamir_key_t *" k ","
.BI "                          uint8_t *" secret );
.sp
.BI "int shamir_recover_poly(shamir_params_t " params ", shamir_key_t *" k ","
.BI "                        shamir_poly_t *" p );
.fi
.SH DESCRIPTION
.BR shamir_recover_secret ()
retrives the secret encoded by the keys
.IR k .
.BR shamir_recover_poly ()
retrieves the polynomial used to generate the keys
.IR k .
.PP
.I k
must be an array of length
.IR params.t ,
with the size of each element given by
.BR shamir_key_size (3).
.PP
.I secret
must be preallocated with size
.IR params.size .
.PP
.I p
must be preallocated with size given by
.BR shamir_poly_size (3).
.PP
For the secret or polynomial to be successfully recovered, the keys
.I k
must be distinct and obtained from a single polynomial using
.BR shamir_get_key (3)
or
.BR shamir_get_keys (3).
.PP
Furthermore, the number of keys must be exactly the threshold value,
.IR params.t .
This cannot be checked, but is implicitly assumed by expecting
.I k
to be the correct length.
.PP
Calling
.BR shamir_recover_secret ()
or
.BR shamir_recover_poly ()
with invalid keys is not guaranteed to produce an error.
.SH NOTES
.BR shamir_recover_poly ()
is a computationally intensive process and may take a long time, especially for hgih threshold values
.IR params.t .
.PP
For a full description of the semantics of
.BR shamir_recover_secret ()
and
.BR shamir_recover_poly ()
see
.BR shamir (7).
.SH RETURN VALUE
On success,
.BR shamir_recover_secret ()
returns 0.
.sp
On error, \-1 is returned and \fIerrno\fP is set appropriately.
.SH SEE ALSO
.BR shamir (7),
.BR shamir_poly_size (3),
.BR shamir_key_size (3),
.BR shamir_init_poly (3),
.BR shamir_get_key (3),
.BR shamir_get_keys (3),
.BR shamir_recover_poly (3)
